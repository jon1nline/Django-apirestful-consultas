# .github/workflows/docker-ci-cd.yml
name: Docker CI/CD and Deploy

on:
  push:
    branches: [ main ]

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install security tools
        run: |
          pip install bandit safety semgrep
          
      - name: Run Bandit (Python SAST)
        run: bandit -r . -ll

      - name: Check dependencies with Safety
        run: |
          safety check

      - name: Run Semgrep (Django rules)
        run: semgrep --config=p/django

     


      - name: Lint Dockerfile with Hadolint
        run: |
          docker run --rm -i hadolint/hadolint /bin/hadolint \
            --failure-threshold warning \
            - < Dockerfile

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django

    - name: Run migrations
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: Run tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      run: python manage.py test

  build-and-push:
    needs: [security-checks, test]
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.version }} # Exporta a tag da imagem para outros jobs
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/lacrei
          tags: |
            type=sha,prefix=,format=short # Cria a tag baseada no hash do commit (ex: a1b2c3d)

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    permissions:      # <-- ADICIONE ESTE BLOCO
      contents: write
    steps:
      - name: Checkout do c칩digo
        uses: actions/checkout@v4

      - name: Deploy to Production with Migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }} 
          username: ${{ secrets.SSH_USER }} 
          key: ${{ secrets.SSH_PRIVATE_KEY }} 
          script: |
            # Garante que o script pare imediatamente se qualquer comando falhar
            set -e

            # 1. Puxa a imagem mais recente do Docker Hub
            echo "====> Baixando a nova imagem..."
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/lacrei:${{ needs.build-and-push.outputs.image_tag }}

            # 2. Roda um container tempor치rio APENAS para aplicar as migra칞칫es
            #    --rm garante que o container seja removido ap칩s a execu칞칚o.
            echo "====> Executando migra칞칫es do banco de dados..."
            docker run --rm \
              -e POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}" \
              -e POSTGRES_PORT="${{ secrets.POSTGRES_PORT }}" \
              -e POSTGRES_DB="${{ secrets.POSTGRES_DB }}" \
              -e POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
              -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
              -e SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
              -e ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}" \
              -e ASAAS_ACCESS_TOKEN="${{ secrets.ASAAS_ACCESS_TOKEN }}" \ 
              -e ASAAS_WEBHOOK_TOKEN="${{ secrets.ASAAS_WEBHOOK_TOKEN }}" \
              ${{ secrets.DOCKER_HUB_USERNAME }}/lacrei:${{ needs.build-and-push.outputs.image_tag }} \
              python manage.py migrate --noinput

            # 3. Para e remove o container antigo da aplica칞칚o (se existir)
            echo "====> Reiniciando o container da aplica칞칚o..."
            docker stop lacrei-app || true
            docker rm lacrei-app || true
            
            # 4. Inicia o novo container da aplica칞칚o principal (sem rodar migrate de novo)
            #    O CMD/ENTRYPOINT padr칚o do Dockerfile (que inicia o Gunicorn) ser치 usado.
            echo "====> Iniciando novo container da aplica칞칚o..."
            docker run -d --name lacrei-app -p 80:8000 \
              -e POSTGRES_HOST='${{ secrets.POSTGRES_HOST }}' \
              -e POSTGRES_PORT='${{ secrets.POSTGRES_PORT }}' \
              -e POSTGRES_DB='${{ secrets.POSTGRES_DB }}' \
              -e POSTGRES_USER='${{ secrets.POSTGRES_USER }}' \
              -e POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
              -e SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' \
              -e ALLOWED_HOSTS='${{ secrets.ALLOWED_HOSTS }}' \
              -e ASAAS_ACCESS_TOKEN='${{ secrets.ASAAS_ACCESS_TOKEN }}' \    
              -e ASAAS_WEBHOOK_TOKEN='${{ secrets.ASAAS_WEBHOOK_TOKEN }}' \ 
              ${{ secrets.DOCKER_HUB_USERNAME }}/lacrei:${{ needs.build-and-push.outputs.image_tag }}

      - name: Post-Deploy Health Check
        run: |
          # Simula uma verifica칞칚o. Se o site n칚o retornar 200, o passo falha e aciona o rollback.
          # Substitua 'example.com' pela URL real da sua aplica칞칚o
          sleep 20 # Espera a aplica칞칚o iniciar
          curl -f http://${{ secrets.SSH_HOST }} || exit 1

      - name: Create GitHub Release on Success
        # Este passo s칩 executa se o deploy e o health check foram bem-sucedidos
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ needs.build-and-push.outputs.image_tag }} \
            --title "Release ${{ needs.build-and-push.outputs.image_tag }}" \
            --notes "Deploy bem-sucedido para produ칞칚o."

  automatic-rollback:
    if: failure() && github.ref == 'refs/heads/main' # S칩 executa em falha na branch main
    needs: deploy-to-production
    runs-on: ubuntu-latest
    steps:
      - name: Get Last Successful Release Tag
        id: get_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Pega a tag da 칔LTIMA release bem-sucedida (a segunda na lista, j치 que a primeira seria a falha se tivesse sido criada)
          LAST_GOOD_TAG=$(gh release list --limit 2 --json tagName --jq '.[1].tagName')
          if [ -z "$LAST_GOOD_TAG" ]; then
            echo "Nenhuma release anterior encontrada para o rollback."
            exit 1
          fi
          echo "tag_to_rollback=$LAST_GOOD_TAG" >> $GITHUB_ENV

      - name: Perform Rollback
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "游뚿 DEPLOY FALHOU! Iniciando rollback para a vers칚o ${{ env.tag_to_rollback }} 游뚿"
            
            # Puxa a imagem est치vel anterior
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/lacrei:${{ env.tag_to_rollback }}
            
            # Para e remove o container com falha
            docker stop lacrei-app || true
            docker rm lacrei-app || true
            
            # Inicia o container com a vers칚o est치vel
            docker run -d --name lacrei-app -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/lacrei:${{ env.tag_to_rollback }}